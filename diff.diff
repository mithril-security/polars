diff --git a/polars/polars-lazy/polars-plan/src/udf_registry.rs b/polars/polars-lazy/polars-plan/src/udf_registry.rs
index 09e1454e2..6037dbeb1 100644
--- a/polars/polars-lazy/polars-plan/src/udf_registry.rs
+++ b/polars/polars-lazy/polars-plan/src/udf_registry.rs
@@ -16,7 +16,7 @@ pub static UDF_DESERIALIZE_REGISTRY: OnceCell<UdfSerializeRegistry> = OnceCell::
 
 pub fn serialize_udf<S: Serializer>(
     ty: &str,
-    obj: &dyn erased_serde::Serialize,
+    obj: &dyn ErasedSerialize,
     serializer: S,
 ) -> Result<S::Ok, S::Error> {
     // { "type": <type>, "data": <data> }
@@ -77,7 +77,7 @@ impl<'de, T: 'static> Visitor<'de> for MapLookupVisitor<T> {
             where
                 D: Deserializer<'de>,
             {
-                let mut erased = <dyn erased_serde::Deserializer>::erase(deserializer);
+                let mut erased = <dyn ErasedDeserializer>::erase(deserializer);
                 (self.f)(&mut erased).map_err(Error::custom)
             }
         }
@@ -96,9 +96,8 @@ pub fn deserialize_udf<'de, D: Deserializer<'de>, T: 'static>(
 
 // Deserialization: Registry
 
-pub type DeserializeFn<T> = Box<
-    dyn Fn(&mut dyn erased_serde::Deserializer) -> Result<T, erased_serde::Error> + Send + Sync,
->;
+pub type DeserializeFn<T> =
+    Box<dyn Fn(&mut dyn ErasedDeserializer) -> Result<T, ErasedError> + Send + Sync>;
 
 pub struct Registry<T> {
     map: HashMap<&'static str, DeserializeFn<T>>,
@@ -135,9 +134,7 @@ impl<T> Registry<T> {
     ) -> &mut Self {
         self.map.insert(
             key,
-            Box::new(move |deser: &mut dyn erased_serde::Deserializer| {
-                D::deserialize(deser).map(&make_t)
-            }),
+            Box::new(move |deser: &mut dyn ErasedDeserializer| D::deserialize(deser).map(&make_t)),
         );
 
         self
diff --git a/py-polars/src/lazy/mod.rs b/py-polars/src/lazy/mod.rs
index eca90eab6..99291b2cc 100644
--- a/py-polars/src/lazy/mod.rs
+++ b/py-polars/src/lazy/mod.rs
@@ -3,6 +3,7 @@ pub mod dataframe;
 pub mod dsl;
 #[cfg(feature = "meta")]
 mod meta;
+pub mod serializable;
 pub mod utils;
 
 pub use apply::*;
diff --git a/py-polars/src/lazy/serializable.rs b/py-polars/src/lazy/serializable.rs
new file mode 100644
index 000000000..a99ad49b0
--- /dev/null
+++ b/py-polars/src/lazy/serializable.rs
@@ -0,0 +1,33 @@
+use polars::prelude::*;
+use polars_lazy::udf_registry::*;
+use pyo3::prelude::*;
+use pyo3::types::PyList;
+
+use crate::lazy::dsl::PyExpr;
+use crate::py_modules::POLARS;
+use crate::series::PySeries;
+use crate::Wrap;
+
+pub struct PyUdfLambda {
+    lambda: PyObject,
+}
+impl Serialize for PyUdfLambda {
+    fn serialize<S: Serializer>(&self, serializer: S) -> Result<S::Ok, S::Error> {
+        todo!()
+    }
+}
+impl<'de> Deserialize<'de> for PyUdfLambda {
+    fn deserialize<D: Deserializer<'de>>(deserializer: D) -> Result<Self, D::Error> {
+        todo!()
+    }
+}
+
+impl polars_lazy::dsl::SeriesUdf for PyUdfLambda {
+    fn as_serialize(&self) -> Option<(&str, &dyn ErasedSerialize)> {
+        Some(("python", self))
+    }
+
+    fn call_udf(&self, s: &mut [Series]) -> PolarsResult<Series> {
+        todo!()
+    }
+}
